!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--y&&0===m&&E()}(e,n),t&&t(e,n)};var n,r=!0,o="6ec6737d44309476bb9e",i=1e4,a={},c=[],u=[];function s(e){var t=D[e];if(!t)return x;var r=function(r){return t.hot.active?(D[r]?D[r].parents.includes(e)||D[r].parents.push(e):(c=[e],n=r),t.children.includes(r)||t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),x(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return x[e]},set:function(t){x[e]=t}}};for(var i in x)Object.prototype.hasOwnProperty.call(x,i)&&"e"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===l&&f("prepare"),m++,x.e(e).then(t,function(e){throw t(),e});function t(){m--,"prepare"===l&&(b[e]||O(e),0===m&&0===y&&E())}},r}var d=[],l="idle";function f(e){l=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var p,h,v,y=0,m=0,b={},g={},w={};function _(e){return+e+""===e?+e:e}function j(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=e,f("check"),(t=i,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=x.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return f("idle"),null;g={},b={},w=e.c,v=e.h,f("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return O(0),"prepare"===l&&0===m&&0===y&&E(),t});var t}function O(e){w[e]?(g[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=x.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):b[e]=!0}function E(){f("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return k(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(_(n));e.resolve(t)}}function k(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var n,r,i,u,s;function d(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((u=D[i])&&!u.hot._selfAccepted){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var c=0;c<u.parents.length;c++){var s=u.parents[c],d=D[s];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([s]),moduleId:i,parentId:s};t.includes(s)||(d.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),p(n[s],[i])):(delete n[s],t.push(s),r.push({chain:a.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.includes(r)||e.push(r)}}t=t||{};var y={},m=[],b={},g=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var j in h)if(Object.prototype.hasOwnProperty.call(h,j)){var O;s=_(j);var E=!1,k=!1,P=!1,H="";switch((O=h[j]?d(s):{type:"disposed",moduleId:j}).chain&&(H="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+O.moduleId+H));break;case"declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+H));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(O),t.ignoreUnaccepted||(E=new Error("Aborted because "+s+" is not accepted"+H));break;case"accepted":t.onAccepted&&t.onAccepted(O),k=!0;break;case"disposed":t.onDisposed&&t.onDisposed(O),P=!0;break;default:throw new Error("Unexception type "+O.type)}if(E)return f("abort"),Promise.reject(E);if(k)for(s in b[s]=h[s],p(m,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,s)&&(y[s]||(y[s]=[]),p(y[s],O.outdatedDependencies[s]));P&&(p(m,[O.moduleId]),b[s]=g)}var M,I=[];for(r=0;r<m.length;r++)s=m[r],D[s]&&D[s].hot._selfAccepted&&I.push({module:s,errorHandler:D[s].hot._selfAccepted});f("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var T,$,A=m.slice();A.length>0;)if(s=A.pop(),u=D[s]){var S={},C=u.hot._disposeHandlers;for(i=0;i<C.length;i++)(n=C[i])(S);for(a[s]=S,u.hot.active=!1,delete D[s],delete y[s],i=0;i<u.children.length;i++){var U=D[u.children[i]];U&&((M=U.parents.indexOf(s))>=0&&U.parents.splice(M,1))}}for(s in y)if(Object.prototype.hasOwnProperty.call(y,s)&&(u=D[s]))for($=y[s],i=0;i<$.length;i++)T=$[i],(M=u.children.indexOf(T))>=0&&u.children.splice(M,1);for(s in f("apply"),o=v,b)Object.prototype.hasOwnProperty.call(b,s)&&(e[s]=b[s]);var N=null;for(s in y)if(Object.prototype.hasOwnProperty.call(y,s)&&(u=D[s])){$=y[s];var V=[];for(r=0;r<$.length;r++)if(T=$[r],n=u.hot._acceptedDependencies[T]){if(V.includes(n))continue;V.push(n)}for(r=0;r<V.length;r++){n=V[r];try{n($)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:s,dependencyId:$[r],error:e}),t.ignoreErrored||N||(N=e)}}}for(r=0;r<I.length;r++){var q=I[r];s=q.module,c=[s];try{x(s)}catch(e){if("function"==typeof q.errorHandler)try{q.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:n,originalError:e}),t.ignoreErrored||N||(N=n),N||(N=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:s,error:e}),t.ignoreErrored||N||(N=e)}}return N?(f("fail"),Promise.reject(N)):(f("idle"),new Promise(function(e){e(m)}))}var D={};function x(t){if(D[t])return D[t].exports;var r=D[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:j,apply:k,status:function(e){if(!e)return l;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(u=c,c=[],u),children:[]};return e[t].call(r.exports,r,r.exports,s(t)),r.l=!0,r.exports}x.m=e,x.c=D,x.d=function(e,t,n){x.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},x.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},x.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return x.d(t,"a",t),t},x.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},x.p="",x.h=function(){return o},s("./src/index.js")(x.s="./src/index.js")}({"./src/index.js":function(e,t,n){"use strict";var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n("./src/js/observe.js"),a=n("./src/js/compile.js"),c=(r=a)&&r.__esModule?r:{default:r};var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$options=t,this._data=t.data,this._proxyData(this._data),new i.Observe(this._data),new c.default(t.el||document.body,this)}return o(e,[{key:"_proxyData",value:function(e){var t=this;Object.keys(e).forEach(function(e){Object.defineProperty(t,e,{configurable:!0,enumerable:!0,get:function(){return this._data[e]},set:function(t){this._data[e]=t}})})}}]),e}();window.Mvvm=u},"./src/js/compile.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n("./src/js/watcher.js"),a=(r=i)&&r.__esModule?r:{default:r};var c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$vm=n,this.$el=this.isElementNode(t)?t:document.querySelector(t),this.$el&&(this.$fragment=this.nodeFragment(this.$el),this.compileElement(this.$fragment),this.$el.appendChild(this.$fragment))}return o(e,[{key:"compileElement",value:function(e){var t=this,n=e.childNodes;Array.from(n).forEach(function(e){var n=e.textContent;t.isElementNode(e)?t.compile(e):t.isTextNode(e)&&/\{\{((?:.|\n)+?)\}\}/.test(n)&&t.compileText(e,RegExp.$1.trim()),e.childNodes&&e.childNodes.length&&t.compileElement(e)})}},{key:"compile",value:function(e){var t=this,n=e.attributes;Array.from(n).forEach(function(n){var r=n.name;if(t.isDirective(r)){var o=n.value,i=r.substring(2);t.isEventDirective(i)?d.eventHandler(e,t.$vm,o,i):d[i]&&d[i](e,t.$vm,o),e.removeAttribute(r)}})}},{key:"compileText",value:function(e,t){d.text(e,this.$vm,t)}},{key:"nodeFragment",value:function(e){for(var t=document.createDocumentFragment(),n=void 0;n=e.firstChild;)t.appendChild(n);return t}},{key:"isElementNode",value:function(e){return 1===e.nodeType}},{key:"isTextNode",value:function(e){return 3===e.nodeType}},{key:"isDirective",value:function(e){return 0===e.indexOf("v-")}},{key:"isEventDirective",value:function(e){return 0===e.indexOf("on")}}]),e}();t.default=c;var u=void 0,s=null,d={html:function(e,t,n){this.bind(e,t,n,"html")},text:function(e,t,n){this.bind(e,t,n,"text")},class:function(e,t,n){this.bind(e,t,n,"class")},model:function(e,t,n){var r=this;this.bind(e,t,n,"model");var o=this._getVmVal(t,n);e.addEventListener("input",function(e){var i=e.target.value;u=e.target,i!==o&&(clearTimeout(s),s=setTimeout(function(){r._setVmVal(t,n,i),o=i}))})},bind:function(e,t,n,r){var o=l[r+"Updater"];o&&o(e,this._getVmVal(t,n)),new a.default(t,n,function(t,n){o&&o(e,t,n)})},eventHandler:function(e,t,n,r){var o=r.split(":")[1],i=t.$options.methods&&t.$options.methods[n];o&&i&&e.addEventListener(o,i.bind(t),!1)},_getVmVal:function(e,t){var n=e;return t.split(".").forEach(function(e){e=e.trim(),n=n[e]}),n},_setVmVal:function(e,t,n){var r=e,o=t.split(".");o.forEach(function(e,t){e=e.trim(),t<o.length-1?r=r[e]:r[e]=n})}},l={htmlUpdater:function(e,t){e.innerHTML=void 0===t?"":t},textUpdater:function(e,t){e.textContent=void 0===t?"":t},classUpdater:function(){},modelUpdater:function(e,t,n){if(u===e)return!1;u=void 0,e.value=void 0===t?"":t}}},"./src/js/dep.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=0,i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=o++,this.subs=[]}return r(e,[{key:"addSub",value:function(e){this.subs.push(e)}},{key:"removeSub",value:function(e){var t=this.subs.indexOf(e);t>-1&&this.subs.splice(t,1)}},{key:"notify",value:function(){this.subs.slice().forEach(function(e){e.update()})}},{key:"depend",value:function(){e.target&&e.target.addDep(this)}}]),e}();t.default=i,i.target=null},"./src/js/observe.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Observe=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.defineReactive=s;var i,a=n("./src/js/dep.js"),c=(i=a)&&i.__esModule?i:{default:i};var u=t.Observe=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.dep=new c.default,this.walk(t)}return o(e,[{key:"walk",value:function(e){Object.keys(e).forEach(function(t){s(e,t,e[t])})}}]),e}();function s(e,t,n){var o=new c.default,i=function(e){if("object"!==(void 0===e?"undefined":r(e))||!e)return;return new u(e)}(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,set:function(e){(n!==e||n==n&&e==e)&&(n=e,o.notify())},get:function(){return c.default.target&&(o.depend(),i&&i.dep.depend()),n}})}},"./src/js/watcher.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n("./src/js/dep.js"),a=(r=i)&&r.__esModule?r:{default:r};var c=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vm=t,this.expOrFn=n.trim(),this.cb=r,this.depIds=new Set,this.getter="function"==typeof n?n:this.parseGetter(n),this.value=this.get()}return o(e,[{key:"update",value:function(){this.run()}},{key:"run",value:function(){var e=this.get(),t=this.value;e!==t&&(this.value=e,this.cb.call(this.vm,e,t))}},{key:"get",value:function(){a.default.target=this;var e=this.getter.call(this.vm,this.vm);return a.default.target=null,e}},{key:"addDep",value:function(e){var t=e.id;this.depIds.has(t)||(e.addSub(this),this.depIds.add(t))}},{key:"parseGetter",value:function(e){if(!/[^\w.$]/.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}}]),e}();t.default=c}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,